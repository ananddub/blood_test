// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  phone         String?   @unique
  password      String?
  name          String
  role          Role      @default(PATIENT)
  language      String    @default("en")
  address       String?
  coordinates   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  loyaltyPoints Int       @default(0)
  referralCode  String?   @unique

  referredBy    Int?
  referredFrom  User?  @relation("Referrals", fields: [referredBy], references: [id])
  referredUsers User[] @relation("Referrals")

  bookings      BloodTest[]    @relation("PatientBookings")
  lab           Lab?           @relation("LabAdmin")
  deliveries    BloodTest[]    @relation("DeliveryAgent")
  notifications Notification[] @relation("UserNotifications")
  reviews       Review[]       @relation("UserReviews")
  auditLogs     AuditLog[]     @relation("UserAuditLogs")
  payments      Payment[]      @relation("UserPayments")
  JWT           JWT?           @relation("UserJWTs")

  @@index([email])
  @@index([phone])
  @@index([role])
}

model JWT {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation("UserJWTs", fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  PATIENT
  LAB_ADMIN
  DELIVERY_AGENT
  SUPER_ADMIN
}

model Lab {
  id             Int         @id @default(autoincrement())
  name           String
  address        String
  coordinates    Json
  licenseNumber  String      @unique
  operatingHours Json?
  testTypes      String[]
  certifications String[]
  isApproved     Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  adminId        Int         @unique
  admin          User?       @relation("LabAdmin", fields: [adminId], references: [id])
  bookings       BloodTest[] @relation("LabBookings")
  reviews        Review[]    @relation("LabReviews")
  avgRating      Float?
  totalReviews   Int         @default(0)
  documents      Document[]  @relation("LabDocuments")

  @@index([isApproved])
  @@index([coordinates])
}

model BloodTest {
  id        Int  @id @default(autoincrement())
  patientId Int
  patient   User @relation("PatientBookings", fields: [patientId], references: [id])

  labId Int
  lab   Lab @relation("LabBookings", fields: [labId], references: [id])

  deliveryAgentId Int?
  deliveryAgent   User? @relation("DeliveryAgent", fields: [deliveryAgentId], references: [id])

  testType              String
  packageName           String?
  status                TestStatus @default(BOOKED)
  bookingDate           DateTime
  collectionDate        DateTime?
  collectionAddress     String
  collectionCoordinates Json?
  deliveryDate          DateTime?
  processedDate         DateTime?
  report                Report?    @relation("TestReport")
  payment               Payment?   @relation("TestPayment")

  notifications Notification[] @relation("TestNotifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([labId])
  @@index([deliveryAgentId])
  @@index([status])
  @@index([bookingDate])
}

enum TestStatus {
  BOOKED
  CONFIRMED
  COLLECTED
  IN_TRANSIT
  RECEIVED
  PROCESSED
  REPORT_READY
  CANCELLED
}

model Report {
  id          Int        @id @default(autoincrement())
  bloodTestId Int        @unique
  test        BloodTest  @relation("TestReport", fields: [bloodTestId], references: [id])
  s3Url       String
  remarks     String?
  results     Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  accessedBy  AuditLog[] @relation("ReportAccessLogs")

  @@index([bloodTestId])
}

model Payment {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation("UserPayments", fields: [userId], references: [id])
  testId            Int?          @unique
  test              BloodTest?    @relation("TestPayment", fields: [testId], references: [id])
  amount            Float
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  razorpayOrderId   String?
  razorpayPaymentId String?
  refundAmount      Float?
  refundStatus      RefundStatus?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([userId])
  @@index([testId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  PENDING
  PROCESSED
  REJECTED
}

model Notification {
  id          Int                @id @default(autoincrement())
  userId      Int
  user        User               @relation("UserNotifications", fields: [userId], references: [id])
  bloodTestId Int?
  test        BloodTest?         @relation("TestNotifications", fields: [bloodTestId], references: [id])
  type        NotificationType
  message     String
  channel     ChannelType
  status      NotificationStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  sentAt      DateTime?
  error       String?

  @@index([userId])
  @@index([bloodTestId])
  @@index([status])
}

enum NotificationType {
  BOOKING_CONFIRMED
  SAMPLE_COLLECTED
  REPORT_READY
  REMINDER
  PROMO
}

enum ChannelType {
  PUSH
  SMS
  EMAIL
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  labId     Int
  lab       Lab      @relation("LabReviews", fields: [labId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([labId])
  @@index([rating])
}

model Document {
  id        Int      @id @default(autoincrement())
  labId     Int
  lab       Lab      @relation("LabDocuments", fields: [labId], references: [id])
  name      String
  s3Url     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([labId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  reportId  Int?
  report    Report?  @relation("ReportAccessLogs", fields: [reportId], references: [id])
  action    String
  details   Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([reportId])
  @@index([action])
}

model PromoCode {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  maxUses    Int?
  usedCount  Int      @default(0)
  validFrom  DateTime
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([code])
}

model Configuration {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}
