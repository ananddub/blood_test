// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export enum Role {
  ROLE_UNSPECIFIED = 0,
  PATIENT = 1,
  DOCTOR = 2,
  WORKER = 3,
  ADMIN = 4,
  UNRECOGNIZED = -1,
}

export interface UserDto {
  id: string;
  phone: string;
  name: string;
  role: Role;
  language: string;
  address: string;
  /** JSON as string */
  coordinates: string;
  createdAt: string;
  updatedAt: string;
  isActive: boolean;
  isVerified: boolean;
  phoneCode: string;
  lastLogin: string;
  loyaltyPoints: number;
  referralCode: string;
  referredBy: string;
  referredFrom: UserRefDto | undefined;
  labId: string;
}

/** Reference DTO to avoid recursion */
export interface UserRefDto {
  id: string;
  name?: string | undefined;
  phone?: string | undefined;
  referralCode?: string | undefined;
}

export interface TokenPair {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
}

export interface AuthResponse {
  user: UserDto | undefined;
  tokens: TokenPair | undefined;
}

export interface CreateUserDto {
  name: string;
  phone: string;
  role?: Role | undefined;
  language?: string | undefined;
  address?: string | undefined;
  phoneCode?: string | undefined;
  referralCode?: string | undefined;
  referredBy?: string | undefined;
  coordinates?: string | undefined;
}

export interface UpdateUserDto {
  id: string;
  name?: string | undefined;
  phone?: string | undefined;
  role?: Role | undefined;
  language?: string | undefined;
  address?: string | undefined;
  phoneCode?: string | undefined;
  referralCode?: string | undefined;
  referredBy?: string | undefined;
  coordinates?: string | undefined;
  isActive?: boolean | undefined;
  isVerified?: boolean | undefined;
  loyaltyPoints?: number | undefined;
}

export interface GetUserDto {
  id: string;
}

export interface DeleteUserDto {
  id: string;
}

export interface UserList {
  users: UserDto[];
}

export interface Empty {
}

export interface LoginUserDto {
  phone: string;
}

export interface LogoutUserDto {
  id: string;
}

export interface VerifyOtpDto {
  phone: string;
  otp: string;
}

export interface RefreshTokenDto {
  refreshToken: string;
}

/** ---------- Services ---------- */
export interface ResponseUserDto {
  code: number;
  message: string;
  data?: UserDto | undefined;
}

export interface ResponseUserList {
  code: number;
  message: string;
  data: UserDto[];
}

/** Auth Service */
export interface LoginResponse {
  code: number;
  message: string;
  data?: AuthResponse | undefined;
}

export interface BasicResponse {
  code: number;
  message: string;
}

export interface TokenResponse {
  code: number;
  message: string;
  data?: TokenPair | undefined;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface UserServiceClient {
  create(request: CreateUserDto): Observable<ResponseUserDto>;

  update(request: UpdateUserDto): Observable<ResponseUserDto>;

  findOne(request: GetUserDto): Observable<ResponseUserDto>;

  findAll(request: Empty): Observable<ResponseUserList>;

  remove(request: DeleteUserDto): Observable<ResponseUserDto>;
}

export interface UserServiceController {
  create(request: CreateUserDto): Promise<ResponseUserDto> | Observable<ResponseUserDto> | ResponseUserDto;

  update(request: UpdateUserDto): Promise<ResponseUserDto> | Observable<ResponseUserDto> | ResponseUserDto;

  findOne(request: GetUserDto): Promise<ResponseUserDto> | Observable<ResponseUserDto> | ResponseUserDto;

  findAll(request: Empty): Promise<ResponseUserList> | Observable<ResponseUserList> | ResponseUserList;

  remove(request: DeleteUserDto): Promise<ResponseUserDto> | Observable<ResponseUserDto> | ResponseUserDto;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "findOne", "findAll", "remove"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

export interface AuthServiceClient {
  login(request: LoginUserDto): Observable<LoginResponse>;

  register(request: CreateUserDto): Observable<BasicResponse>;

  logout(request: LogoutUserDto): Observable<BasicResponse>;

  verifyOtp(request: VerifyOtpDto): Observable<BasicResponse>;

  refreshToken(request: RefreshTokenDto): Observable<TokenResponse>;
}

export interface AuthServiceController {
  login(request: LoginUserDto): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  register(request: CreateUserDto): Promise<BasicResponse> | Observable<BasicResponse> | BasicResponse;

  logout(request: LogoutUserDto): Promise<BasicResponse> | Observable<BasicResponse> | BasicResponse;

  verifyOtp(request: VerifyOtpDto): Promise<BasicResponse> | Observable<BasicResponse> | BasicResponse;

  refreshToken(request: RefreshTokenDto): Promise<TokenResponse> | Observable<TokenResponse> | TokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["login", "register", "logout", "verifyOtp", "refreshToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
