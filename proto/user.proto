syntax = "proto3";

package user;

service UserService {
  rpc GetCurrentUser (GetCurrentUserRequest) returns (User);
  rpc UpdateCurrentUser (UpdateCurrentUserRequest) returns (User);
  rpc ListAllUsers (ListAllUsersRequest) returns (UserList);
  rpc UpdateUserStatus (UpdateUserStatusRequest) returns (UpdateUserStatusResponse);


  rpc StreamUsers (StreamUsersRequest) returns (stream UserSummary);
  rpc WatchUserUpdates (WatchUserUpdatesRequest) returns (stream UserUpdateEvent);
}

message GetCurrentUserRequest {
  string user_id = 1;
}

message User {
  int32 id = 1;
  optional string email = 2;
  optional string phone = 3;
  string name = 4;
  string role = 5;
  string language = 6;
  optional string address = 7;
  optional Coordinates coordinates = 8;
  int32 loyalty_points = 9;
  optional string referral_code = 10;
}

message Coordinates {
  double lat = 1;
  double lon = 2;
}

message UpdateCurrentUserRequest {
  string user_id = 1;
  optional string name = 2;
  optional string language = 3;
  optional string address = 4;
  optional Coordinates coordinates = 5;
}

message ListAllUsersRequest {
  optional string role = 1;
  optional int32 page = 2;
  optional int32 limit = 3;
}

message UserList {
  repeated UserSummary users = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
}

message UserSummary {
  int32 id = 1;
  optional string email = 2;
  optional string phone = 3;
  string name = 4;
  string role = 5;
  bool is_active = 6;
}

message UpdateUserStatusRequest {
  int32 id = 1;
  bool is_active = 2;
}

message UpdateUserStatusResponse {
  int32 id = 1;
  bool is_active = 2;
}

message StreamUsersRequest {
  optional string role = 1;
  optional bool is_active = 2;
}

message WatchUserUpdatesRequest {
  optional int32 user_id = 1;
}

message UserUpdateEvent {
  enum EventType {
    CREATED = 0;
    UPDATED = 1;
    DELETED = 2;
    STATUS_CHANGED = 3;
  }

  EventType event_type = 1;
  UserSummary user = 2;
  int64 timestamp = 3;
}
